name: Build

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  release:
    types: [created]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libsqlite3-dev libglib2.0-dev libasound2-dev libxdo-dev libappindicator3-dev pkg-config

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache target directory
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-target-${{ hashFiles('**/Cargo.lock') }}

      - name: Run tests
        run: cargo test --all-features

  build-linux:
    name: Build Linux
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'release'
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libsqlite3-dev libglib2.0-dev libasound2-dev libxdo-dev libappindicator3-dev pkg-config

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Build release
        run: cargo build --release --verbose

      - name: Create archive
        run: |
          cd target/release
          tar -czf aaeq-linux-x64.tar.gz aaeq

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: aaeq-linux-x64
          path: target/release/aaeq-linux-x64.tar.gz

  build-linux-arm64:
    name: Build Linux ARM64
    runs-on: ubuntu-latest
    needs: test
    continue-on-error: true
    if: github.event_name == 'release'
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-unknown-linux-gnu

      - name: Install cross
        run: cargo install cross --git https://github.com/cross-rs/cross

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-arm64-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Build release with cross
        run: cross build --release --target aarch64-unknown-linux-gnu --verbose

      - name: Create archive
        run: |
          cd target/aarch64-unknown-linux-gnu/release
          tar -czf aaeq-linux-arm64.tar.gz aaeq

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: aaeq-linux-arm64
          path: target/aarch64-unknown-linux-gnu/release/aaeq-linux-arm64.tar.gz

  build-macos:
    name: Build macOS
    runs-on: macos-latest
    needs: test
    if: github.event_name == 'release'
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-apple-darwin,aarch64-apple-darwin

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Build x86_64
        run: cargo build --release --target x86_64-apple-darwin

      - name: Build aarch64
        run: cargo build --release --target aarch64-apple-darwin

      - name: Create universal binary
        run: |
          mkdir -p target/universal/release
          lipo -create \
            target/x86_64-apple-darwin/release/aaeq \
            target/aarch64-apple-darwin/release/aaeq \
            -output target/universal/release/aaeq

      - name: Create DMG
        run: |
          # Create app bundle structure
          mkdir -p "AAEQ.app/Contents/MacOS"
          mkdir -p "AAEQ.app/Contents/Resources"

          # Copy binary
          cp target/universal/release/aaeq "AAEQ.app/Contents/MacOS/"
          chmod +x "AAEQ.app/Contents/MacOS/aaeq"

          # Create Info.plist
          cat > "AAEQ.app/Contents/Info.plist" <<EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>CFBundleExecutable</key>
              <string>aaeq</string>
              <key>CFBundleIdentifier</key>
              <string>com.jaschadub.aaeq</string>
              <key>CFBundleName</key>
              <string>AAEQ</string>
              <key>CFBundleVersion</key>
              <string>0.1.0</string>
              <key>CFBundleShortVersionString</key>
              <string>0.1.0</string>
              <key>CFBundlePackageType</key>
              <string>APPL</string>
              <key>LSMinimumSystemVersion</key>
              <string>10.13</string>
          </dict>
          </plist>
          EOF

          # Create DMG using hdiutil
          mkdir dmg_temp
          cp -R AAEQ.app dmg_temp/
          hdiutil create -volname "AAEQ" -srcfolder dmg_temp -ov -format UDZO aaeq-macos-universal.dmg

          # Also create tar.gz for those who prefer it
          cd target/universal/release
          tar -czf aaeq-macos-universal.tar.gz aaeq

      - name: Upload DMG artifact
        uses: actions/upload-artifact@v4
        with:
          name: aaeq-macos-dmg
          path: aaeq-macos-universal.dmg

      - name: Upload tar.gz artifact
        uses: actions/upload-artifact@v4
        with:
          name: aaeq-macos-tarball
          path: target/universal/release/aaeq-macos-universal.tar.gz

  build-windows:
    name: Build Windows
    runs-on: windows-latest
    needs: test
    if: github.event_name == 'release'
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Build release
        run: cargo build --release --verbose

      - name: Create ZIP archive
        run: |
          cd target/release
          7z a aaeq-windows-x64.zip aaeq.exe

      - name: Install cargo-wix
        run: cargo install cargo-wix

      - name: Build MSI installer
        run: cargo wix --nocapture --output target/wix/aaeq-windows-x64.msi -p aaeq

      - name: Upload ZIP artifact
        uses: actions/upload-artifact@v4
        with:
          name: aaeq-windows-x64-zip
          path: target/release/aaeq-windows-x64.zip

      - name: Upload MSI artifact
        uses: actions/upload-artifact@v4
        with:
          name: aaeq-windows-x64-msi
          path: target/wix/aaeq-windows-x64.msi

  upload-release-assets:
    name: Upload Release Assets
    runs-on: ubuntu-latest
    needs: [build-linux, build-linux-arm64, build-macos, build-windows]
    if: ${{ always() && github.event_name == 'release' && (needs.build-linux.result == 'success' || needs.build-macos.result == 'success' || needs.build-windows.result == 'success') }}
    permissions:
      contents: write
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: List downloaded artifacts
        run: |
          echo "Available artifacts:"
          ls -la artifacts/ || echo "No artifacts directory"
          find artifacts -type f || echo "No files found"

      - name: Upload Release Assets
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/aaeq-linux-x64/*.tar.gz
            artifacts/aaeq-linux-arm64/*.tar.gz
            artifacts/aaeq-macos-dmg/*.dmg
            artifacts/aaeq-macos-tarball/*.tar.gz
            artifacts/aaeq-windows-x64-zip/*.zip
            artifacts/aaeq-windows-x64-msi/*.msi
          fail_on_unmatched_files: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
